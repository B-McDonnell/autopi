#!/usr/bin/env bash

# ============================
#  Check for root privileges
# ============================

id=$(id -u)
if test "$id" != 0; then
    echo "Run this script as root" # prompt and exit if standard user
    exit 1
fi


# ============================
#  Perform miscellaneous setup
# ============================

touch /boot/ssh # enable ssh
mkdir /var/opt/autopi  # create directory for script generated files


# ============================
#     install dependencies
# ============================

# Install any necessary python packages
pip3 install -r requirements.txt

# ============================
#   move autopi code to /opt
# ============================
mkdir /opt/autopi
find src/autopi/ -maxdepth 1 \( -path src/autopi/tests -prune \) -o -print | sed 's/^src\/autopi\///' | xargs -I {} cp -r src/autopi/{} /opt/autopi

# ========================
#   chmod python scripts
# ========================
find /opt/autopi -type f -exec awk '/^#!.*python/{print FILENAME}{nextfile}' {} + | xargs chmod +x

# =======================================
#   add user-facing scripts to /usr/bin
# =======================================
ln -s /opt/autopi/add_home_network.py /usr/bin/CSM_add_home_network


# ============================
#      run initial setup
# ============================
SCRIPTS_DIR="/opt/autopi"

# add country information to network discovery system
if "$SCRIPTS_DIR/wpa_country.py" get 1>/dev/null; then
    "$SCRIPTS_DIR/wpa_country.py" update US
fi

# add guest network by default
"$SCRIPTS_DIR"/add_network.py --no-password --priority=2 CSMwireless


# ===================================================
#      write MAC address to boot (CSM_mac.txt)
# ===================================================

# adds mac address to file in boot called "CSM_mac.txt"
WRITE_MAC_COMMAND="$SCRIPTS_DIR/get_mac.py wlan0 > /boot/CSM_mac.txt"
WRITE_MAC_CRON="@reboot $WRITE_MAC_COMMAND"
crontab -l >/tmp/crontab_r 2>/dev/null
grep -Fx "$WRITE_MAC_CRON" /tmp/crontab_r >/dev/null
if grep -Fx "$WRITE_MAC_CRON" /tmp/crontab_r >/dev/null; then
    echo "$WRITE_MAC_CRON">>/tmp/crontab_r
fi
crontab /tmp/crontab_r


# =============================================================
#      add network specified in file (CSM_new_network.txt)
# =============================================================

# adds network according to information in file

# TODO: change reset command to copy a blank file to boot everytime
ADD_NET_COMMAND="$SCRIPTS_DIR/add_network_from_txt.py"
ADD_RESET_COMMAND="printf << EOF
# No space after (=).
# Priority is an int value 1,2, or 3 (3 being prioritized the most).
# If no password/priority, leave empty.
# This file will be reset after network is added.
ssid=
password=
priority=
EOF > /boot/CSM_new_network.txt"


ADD_NET_CRON="@reboot $ADD_NET_COMMAND; $ADD_RESET_COMMAND"
crontab -l >/tmp/crontab_r 2>/dev/null
if grep -Fx "$ADD_NET_CRON" /tmp/crontab_r >/dev/null; then
    echo "$ADD_NET_CRON">>/tmp/crontab_r
fi
crontab /tmp/crontab_r

# =============================================================
#		Install systemd unit files
# =============================================================

function add_systemd_unit() {
	if [ -z "$1" ]; then
		echo "Missing parameter"
		return 1
	fi
	TNAME=$(basename "$1")
    ln -s "$(realpath "$1")" "/etc/systemd/system/$TNAME"
	if [ "enable" == "$2" ]; then
		systemctl enable "$TNAME"
	elif [ "noenable" != "$2" ]; then
		echo "Invalid parameter"
		echo "Usage: add_systemd_unit PATH_TO_UNIT (enable | noenable)"
	fi
}

# add units for startup+shutdown+periodic IP Discovery requests
add_systemd_unit /opt/autopi/hooks/autopi_periodic.service noenable
add_systemd_unit /opt/autopi/hooks/autopi_periodic.timer enable
add_systemd_unit /opt/autopi/hooks/autopi_shutdown.service enable
add_systemd_unit /opt/autopi/hooks/autopi_startup.service enable
_

# =============================================================
#             Add hooks for SSH+VNC status change
# =============================================================

# copy helper units
ln -s /opt/autopi/hooks/autopi_status_change@.service /etc/systemd/system/
ln -s /opt/autopi/hooks/autopi_status_change@.timer /etc/systemd/system/

# Add override files to hook events; they must go in a subdirectory named after the service
VNC_OVERRIDE_DIR="/etc/systemd/system/vncserver-x11-serviced.service.d/"
SSH_OVERRIDE_DIR="/etc/systemd/system/ssh.service.d/"
mkdir "$VNC_OVERRIDE_DIR"
mkdir "$SSH_OVERRIDE_DIR"
ln -s /opt/autopi/hooks/vnc_override.conf "$VNC_OVERRIDE_DIR/override.conf"
ln -s /opt/autopi/hooks/ssh_override.conf "$SSH_OVERRIDE_DIR/override.conf"

systemctl daemon-reload


# =============================================================
#                   Add hook for IP change
# =============================================================

cp /opt/autopi/hooks/99-autopi-ip-hook.sh /lib/dhcpcd/dhcpcd-hooks/99-autopi-ip-hook
