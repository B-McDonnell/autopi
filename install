#!/usr/bin/env bash

# ============================
#  Check for root privileges
# ============================

id=`id -u`
if test $id != 0; then
    echo "Run this script as root" # prompt and exit if standard user
    exit 1
fi


# ============================
#  Perform miscellaneous setup
# ============================

touch /boot/ssh # enable ssh
mkdir /var/opt/autopi  # create directory for script generated files


# ============================
#     install dependencies
# ============================

# Install any necessary python packages
pip3 install -r requirements.txt


# ============================
#   move scripts to /usr/bin
# ============================

function move_pyscript() {
    #if [ -z "$1" ]; then return 0; fi
    stem=`basename "$1" .py` # strip extension
    cp ./src/scripts/"$stem".py /usr/bin/"$stem"
    chmod +x /usr/bin/"$stem"
}

cp ./src/scripts/CSM_getip.py /usr/bin/CSM_getip
chmod +x /usr/bin/CSM_getip

cp ./src/scripts/CSM_getssid.py /usr/bin/CSM_getssid
chmod +x /usr/bin/CSM_getssid

cp ./src/scripts/CSM_get_mac.py /usr/bin/CSM_get_mac
chmod +x /usr/bin/CSM_get_mac

cp ./src/scripts/CSM_add_network.py /usr/bin/CSM_add_network
chmod +x /usr/bin/CSM_add_network

cp ./src/scripts/CSM_wpa_country.py /usr/bin/CSM_wpa_country
chmod +x /usr/bin/CSM_wpa_country

cp ./src/scripts/CSM_setup_home_network.py /usr/bin/CSM_setup_home_network
chmod +x /usr/bin/CSM_setup_home_network

cp ./src/scripts/CSM_get_hw_id.py /usr/bin/CSM_get_hw_id
chmod +x /usr/bin/CSM_get_hw_id


cp ./src/scripts/CSM_add_network_from_txt.py /usr/bin/CSM_add_network_from_txt.py
chmod +x /usr/bin/CSM_add_network_from_txt.py

move_pyscript CSM_generate_request



# ============================
#      run initial setup
# ============================

# add country information to network discovery system
CSM_wpa_country get 1>/dev/null
if [ $? -ne 0 ]; then
    CSM_wpa_country update US
fi
# add guest network by default
CSM_add_network --no-password --priority=2 CSMwireless


# ===================================================
#      write MAC address to boot (CSM_mac.txt)
# ===================================================

# adds mac address to file in boot called "CSM_mac.txt"
WRITE_MAC_COMMAND="CSM_get_mac wlan0 > /boot/CSM_mac.txt"
WRITE_MAC_CRON="@reboot $WRITE_MAC_COMMAND"
crontab -l >/tmp/crontab_r 2>/dev/null
grep -Fx "$WRITE_MAC_CRON" /tmp/crontab_r >/dev/null
if [ "$?" -ne 0 ]; then
    echo "$WRITE_MAC_CRON">>/tmp/crontab_r
fi
crontab /tmp/crontab_r


# =============================================================
#      add network specified in file (CSM_new_network.txt)
# =============================================================

# adds network according to information in file

# TODO: change reset command to copy a blank file to boot everytime
ADD_NET_COMMAND = "CSM_add_network_from_txt"
ADD_RESET_COMMAND="printf '%s\n' '# No space after (=).' '# Priority is an int value 1,2, or 3 (3 being prioritized the most).' '# If no password/priority, leave empty.' '# This file will be reset after network is added.' 'ssid=' 'password=' 'priority=' > /boot/CSM_new_network.txt"


ADD_NET_CRON="@reboot $ADD_NET_COMMAND; $ADD_RESET_COMMAND"
crontab -l >/tmp/crontab_r 2>/dev/null
grep -Fx "$ADD_NET_CRON" /tmp/crontab_r >/dev/null
if [ "$?" -ne 0 ]; then
    echo "$ADD_NET_CRON">>/tmp/crontab_r
fi
crontab /tmp/crontab_r

# =============================================================
#		Install systemd unit files
# =============================================================

function add_systemd_unit() {
	if [ -z "$1" ]; then
		echo "Missing parameter"
		return 1
	fi
	TNAME=$(basename "$1")
	cp "$1" "/etc/systemd/system/$TNAME"
	if [ "enable" == "$2" ]; then
		systemctl enable $TNAME
	elif [ "noenable" != "$2" ]; then
		echo "Invalid parameter"
		echo "Usage: add_systemd_unit PATH_TO_UNIT (enable | noenable)"
	fi
}

# add units for startup+shutdown+periodic IP Discovery requests
add_systemd_unit src/systemdunits/autopi-periodic.service noenable
add_systemd_unit src/systemdunits/autopi-periodic.timer enable
add_systemd_unit src/systemdunits/autopi-shutdown.service enable
add_systemd_unit src/systemdunits/autopi-startup.service enable


# =============================================================
#             Add hooks for SSH+VNC status change
# =============================================================

# copy helper units
cp src/systemdunits/autopi_status_change@.service /etc/systemd/system/
cp src/systemdunits/autopi_status_change@.timer /etc/systemd/system/

# Add override files to hook events; they must go in a subdirectory named after the service
VNC_OVERRIDE_DIR="/etc/systemd/system/vncserver-x11-serviced.service.d/"
SSH_OVERRIDE_DIR="/etc/systemd/system/ssh.service.d/"
mkdir "$VNC_OVERRIDE_DIR"
mkdir "$SSH_OVERRIDE_DIR"
cp src/systemdunits/vnc_override.conf "$VNC_OVERRIDE_DIR"/override.conf
cp src/systemdunits/ssh_override.conf "$SSH_OVERRIDE_DIR"/override.conf

systemctl daemon-reload


# =============================================================
#                   Add hook for IP change
# =============================================================

cp src/hooks/99-autopi-ip-hook.sh /lib/dhcpcd/dhcpcd-hooks/99-autopi-ip-hook
